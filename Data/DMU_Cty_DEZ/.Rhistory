test<-dcast(aman_dat,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
for(i in 1:nrow(eff)){
for(j in 2:ncol(eff)){
if(eff[i,j]>0 && is.na(test[i,j])){
test[i,j]<-0
}
}
}
View(test)
View(effort)
nrow(test)
for(i in 1:nrow(test)){
for(j in 2:ncol(test)){
if(is.na(eff[i,j] || eff[i,j]==0)){
test[i,j]<-NA
}
if(eff[i,j]>0 && is.na(test[i,j])){
test[i,j]<-0
}
}
}
View(test)
test1<-test[,2:51]+eff[,2:51]
View(test1)
View(effort)
View(eff)
eff[,2:51]
eff[,c(2:51)]
eff
for(i in 1:nrow(test)){
for(j in 2:ncol(test)){
if(is.na(eff[i,j] || eff[i,j]==0)){
test[test[i,j]]<-NA
}
if(eff[i,j]>0 && is.na(test[i,j])){
test[test[i,j]]<-0
}
}
}
View(test)
test<-dcast(aman_dat,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
eff<-dcast(as.data.table(all_dat),Site~Year+Visit,value.var=c("DipN","TrapN"),max,drop=F,fill = NA_real_)
for(i in 1:nrow(test)){
for(j in 2:ncol(test)){
if(eff[i,j]>0 && is.na(test[i,j])){
test[test[i,j]]<-0
}
}
}
for(i in 1:nrow(test)){
for(j in 2:ncol(test)){
if(eff[i,j]>0 && is.na(test[i,j])){
test[test[i,j]]<-0
}
}
}
test<-dcast(aman_dat,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
eff<-dcast(as.data.table(all_dat),Site~Year+Visit,value.var=c("DipN","TrapN"),max,drop=F,fill = NA_real_)
View(eff)
library(reshape2)
?melt
melt(data = test,id.vars=c(Site))
test<-dcast(aman_dat,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
melt(data = test,id.vars=c(Site))
melt(data = test)
test<-dcast(aman_dat,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
eff<-dcast(as.data.table(all_dat),Site~Year+Visit,value.var=c("DipN","TrapN"),max,drop=F,fill = NA_real_)
sp.list<-list()
for(i in unique(all_dat$Species)){
sp.list[[i]]<-dcast(all_dat,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_,subset=c(Species==i))
}
all_dat
head(all_dat)
for(i in unique(all_dat$Species)){
sp.list[[i]]<-dcast(all_dat,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_,subset=c(Species==paste(i)))
}
?dcast
#traps<-dcast(all_dat,Site~Year+Visit,value.var=c("TrapN"),sum,drop=F,fill = NA_real_)
for(i in unique(all_dat$Species)){
sp.list[[i]]<-dcast(all_dat,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_,subset=.(Species==i))
}
sp.list[[1]]
sp.list[[2]]
sp.list[[3]]
names(sp.list)<-unique(all_dat$Species)
sp.list<-list()
for(i in unique(all_dat$Species)){
sp.list[[i]]<-dcast(all_dat,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_,subset=.(Species==i))
}
names(sp.list)<-unique(all_dat$Species)
unique(all_dat$Species)
names(sp.list)
sp.list$AMAN
lapply(sp.list,dim)
sp.list<-list()
for(i in 1:length(unique(all_dat$Species))){
tmp<-subset(all_dat,as.numeric(Species==i))
sp.list[[i]]<-dcast(tmp,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
sp.list<-list()
for(i in 1:length(unique(all_dat$Species))){
tmp<-subset(all_dat,as.numeric(Species)==i)
sp.list[[i]]<-dcast(tmp,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
sp.list<-list()
for(i in 1:length(unique(all_dat$Species))){
tmp<-subset(all_dat,as.numeric(Species)==i & !in.na(Species))
sp.list[[i]]<-dcast(tmp,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
sp.list<-list()
for(i in 1:length(unique(all_dat$Species))){
tmp<-subset(all_dat,as.numeric(Species)==i & !is.na(Species))
sp.list[[i]]<-dcast(tmp,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
1:length(unique(all_dat$Species)
)
sp.list<-list()
for(i in 1:length(unique(all_dat$Species))){
if(!is.na(all_dat$Species)){
tmp<-subset(all_dat,as.numeric(Species)==i)
sp.list[[i]]<-dcast(tmp,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
}
all_dat1<-all.dat[!is.na(all.dat),]
all_dat1<-all_dat[!is.na(all_dat),]
View(all_dat1)
all_dat1<-all_dat[!is.na(all_dat$Species),]
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in 1:length(unique(all_dat1$Species))){
tmp<-subset(all_dat1,as.numeric(Species1)==i)
sp.list[[i]]<-dcast(tmp,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in 1:length(unique(all_dat1$Species))){
tmp<-subset(all_dat1,as.numeric(Species)==i)
sp.list[[i]]<-dcast(tmp,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
names(sp.list)<-unique(all_dat$Species)
names(sp.list)<-unique(all_dat1$Species)
sp.list$AMAN
head(sp.list[[1]])
unique(all_dat1$Species)
unique(all_dat1$Species)
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-dcast(tmp,Site~Method+Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
sp.list$AMAN
head(sp.list$AMAN)
head(eff)
test<-dcast(aman_dat,Year~Site~Method+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
test<-acast(aman_dat,Year~Site~Method+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
test[,,1]
test<-acast(aman_dat,Site~Year~Method+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
test
test[,,1]
test<-acast(aman_dat,Site~Method~Year+Visit,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
test[,,1]
test<-acast(aman_dat,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
test[,,1]
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-dcast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-acast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
sp.list$ACCR
rm(list=ls())
all_dat <- read.csv("F:/Rwork/FLW/all_dataExport2012_2016.csv")
library(reshape2)
library(plyr)
library(dplyr)
library(abind)
#  Data cleaning/manipulation-----------------------------------------
str(all_dat)
all_dat$Jdate<-as.numeric(format(as.Date(as.character(all_dat$Date),"%m/%d/%Y"),"%j"))
all_dat$Year<-as.numeric((format(as.Date(all_dat$Date,format="%m/%d/%Y"), "%Y")))
all_dat$Month<-as.numeric((format(as.Date(all_dat$Date,format="%m/%d/%Y"), "%m")))
all_dat$Season<-ifelse(all_dat$Jdate<100,"spring","summer")
levels(all_dat$Species)[levels(all_dat$Species)=="Hylidae"] <- "HYLIDAE"
levels(all_dat$Species)[levels(all_dat$Species)=="BUFO"] <- "BUSP"
aman_dat<-subset(all_dat,Species=="AMAN" & Jdate < 100)
aman_tot<-aggregate(Quantity~Site+Year,data=aman_dat,FUN=sum)
test<-dcast(aman_dat,Site~Year+Method+Visit,value.var=c("Quantity"),sum,drop=F)
#Create effort dataframe
effort<-ddply(all_dat,.variables = c("Year","Site"),summarise,TrapTot=sum(TrapN,na.rm=T),DipTot=sum(DipN,na.rm=T),.drop=F)
effort$Total<-effort$TrapTot+effort$DipTot
effort$Total[effort$Total==0]<-NA
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-acast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
lapply(sp.list,dim)
all_dat<-subset(all_dat,Season=="spring")
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-acast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
lapply(sp.list,dim)
all_dat<-subset(all_dat,Season=="spring" & Stage=="larva")
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-acast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
lapply(sp.list,dim)
all_dat<-subset(all_dat,Season=="spring" & Stage=="larva")
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-acast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
all_dat<-subset(all_dat,Season=="spring" & Stage=="larva")
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-acast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
lapply(sp.list,dim)
all_dat<-subset(all_dat,Season=="spring" & Stage=="Larva")
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-acast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
lapply(sp.list,dim)
####Peterman Round 2####
rm(list=ls())
all_dat <- read.csv("F:/Rwork/FLW/all_dataExport2012_2016.csv")
library(reshape2)
library(plyr)
library(dplyr)
library(abind)
#  Data cleaning/manipulation-----------------------------------------
str(all_dat)
all_dat$Jdate<-as.numeric(format(as.Date(as.character(all_dat$Date),"%m/%d/%Y"),"%j"))
all_dat$Year<-as.numeric((format(as.Date(all_dat$Date,format="%m/%d/%Y"), "%Y")))
all_dat$Month<-as.numeric((format(as.Date(all_dat$Date,format="%m/%d/%Y"), "%m")))
all_dat$Season<-ifelse(all_dat$Jdate<100,"spring","summer")
levels(all_dat$Species)[levels(all_dat$Species)=="Hylidae"] <- "HYLIDAE"
levels(all_dat$Species)[levels(all_dat$Species)=="BUFO"] <- "BUSP"
aman_dat<-subset(all_dat,Species=="AMAN" & Jdate < 100)
aman_tot<-aggregate(Quantity~Site+Year,data=aman_dat,FUN=sum)
test<-dcast(aman_dat,Site~Year+Method+Visit,value.var=c("Quantity"),sum,drop=F)
#Create effort dataframe
effort<-ddply(all_dat,.variables = c("Year","Site"),summarise,TrapTot=sum(TrapN,na.rm=T),DipTot=sum(DipN,na.rm=T),.drop=F)
effort$Total<-effort$TrapTot+effort$DipTot
effort$Total[effort$Total==0]<-NA
all_dat<-subset(all_dat,Season=="spring" & Stage=="Larva")
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-acast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
lapply(sp.list,dim)
sp.list$AMAN
sp.list$AMAN[,,1]
sp.list$AMAN[,,2]
View(subset(all_dat,Visit==5))
rm(list=ls())
all_dat <- read.csv("F:/Rwork/FLW/all_dataExport2012_2016.csv")
library(reshape2)
library(plyr)
library(dplyr)
library(abind)
#  Data cleaning/manipulation-----------------------------------------
str(all_dat)
all_dat$Jdate<-as.numeric(format(as.Date(as.character(all_dat$Date),"%m/%d/%Y"),"%j"))
all_dat$Year<-as.numeric((format(as.Date(all_dat$Date,format="%m/%d/%Y"), "%Y")))
all_dat$Month<-as.numeric((format(as.Date(all_dat$Date,format="%m/%d/%Y"), "%m")))
all_dat$Season<-ifelse(all_dat$Jdate<100,"spring","summer")
levels(all_dat$Species)[levels(all_dat$Species)=="Hylidae"] <- "HYLIDAE"
levels(all_dat$Species)[levels(all_dat$Species)=="BUFO"] <- "BUSP"
aman_dat<-subset(all_dat,Species=="AMAN" & Jdate < 100)
aman_tot<-aggregate(Quantity~Site+Year,data=aman_dat,FUN=sum)
test<-dcast(aman_dat,Site~Year+Method+Visit,value.var=c("Quantity"),sum,drop=F)
#need to incorporate season in here yet
all_dat<-subset(all_dat,Season=="spring" & Stage=="Larva")
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-acast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
lapply(sp.list,dim)
eff<-dcast(as.data.table(all_dat),Site~Year+Visit,value.var=c("DipN","TrapN"),max,drop=F,fill = NA_real_)
dips<-acast(all_dat,Site~Visit~Year,value.var=c("DipN"),max,drop=F,fill = NA_real_)
traps<-acast(all_dat,Site~Visit~Year,value.var=c("TrapN"),max,drop=F,fill = NA_real_)
eff<-abind(dips,traps, along=2)
head(eff[,,1])
head(sp.list[[2]][,,1])
for(k in 1:dim(eff)[3]){
for(i in 1:nrow(eff)){
for(j in 1:ncol(eff)){
#if(eff[i,j,k]>0 && !is.finite(sp.list[[2]][i,j,k])){
if(eff[i,j,k]==0){
sp.list[[2]][i,j,k]<-0
}
}
}
}
for(k in 1:dim(eff)[3]){
for(j in 1:ncol(eff)){
for(i in 1:nrow(eff)){
#if(eff[i,j,k]>0 && !is.finite(sp.list[[2]][i,j,k])){
if(eff[i,j,k]==0){
sp.list[[2]][i,j,k]<-0
}
}
}
}
str(eff)
str(eff[,,1])
class(eff[1,1,1])
class(eff[1,1,2])
class(eff[3,1,])
class(eff[3,3,])
as.numeric(eff[,,1])
is.numeric(eff[,,1])
for(j in 1:ncol(eff)){
for(i in 1:nrow(eff)){
#if(eff[i,j,k]>0 && !is.finite(sp.list[[2]][i,j,k])){
if(eff[i,j,1]==0){
sp.list[[2]][i,j,1]<-0
}
}
}
View(eff[,,1])
for(k in 1:dim(eff)[3]){
for(j in 1:ncol(eff)){
for(i in 1:nrow(eff)){
if(!is.na(eff[i,j,k])){
sp.list[[2]][i,j,k]<-0
}
}
}
}
sp.list[[2]]
sp.list[[2]][,,1]
all_dat<-subset(all_dat,Season=="spring" & Stage=="Larva")
sp.list<-list()
all_dat1<-all_dat[!is.na(all_dat$Species),]
for(i in unique(sort(all_dat1$Species))){
tmp<-subset(all_dat1,Species==i)
sp.list[[i]]<-acast(tmp,Site~Method+Visit~Year,value.var=c("Quantity"),sum,drop=F,fill = NA_real_)
}
for(k in 1:dim(eff)[3]){
for(j in 1:ncol(eff)){
for(i in 1:nrow(eff)){
#if(eff[i,j,k]>0 && !is.finite(sp.list[[2]][i,j,k])){
if(!is.na(eff[i,j,k]) && is.na(sp.list[[2]][i,j,k])){
sp.list[[2]][i,j,k]<-0
}
}
}
}
sp.list[[2]][,,1]
sp.list[[2]][,,2]
eff[[2]][,,2]
eff[,,2]
apply(sp.list[[2]],3,sum,na.rm=T)
apply(sp.list[[2]],c(1,3),sum,na.rm=T)
apply(sp.list[[2]],c(1,3),sum)
apply(sp.list[[2]],c(1,3),sum,na.rm=T)
tot.aman<-apply(sp.list[[2]],c(1,3),sum,na.rm=T)
cor(tot.aman)
cor(t(tot.aman))
pond.cor<-cor(t(tot.aman))
mean(pond.cor)
mean(pond.corna.rm=T)
mean(pond.cor,na.rm=T)
hist(pond.cor,na.rm=T)
hist(pond.cor)
hist(lower(pond.cor))
mean(cor(tot.aman))
head(tot.aman)
head(t(tot.aman))
tls(matrix(t(tot.aman)),fig=T)
library("Reumannplatz", lib.loc="~/R/win-library/3.3")
tls(matrix(t(tot.aman)),fig=T)
matrix(t(tot.aman))
matrix(t(tot.aman))
tls(matrix(t(tot.aman),nrow=5,ncol=201),fig=T)
tls(matrix(t(tot.aman),nrow=5,ncol=201),fig=T,"spatial")
tls(matrix(t(tot.aman),nrow=5,ncol=201),fig=T)
par(mfrow=c(1,2))
tls(matrix(t(tot.aman),nrow=5,ncol=201),fig=T)
tls(matrix(t(tot.aman),nrow=5,ncol=201),fig=T,"temporal")
tot.aman<-apply(sp.list[[2]],c(1,3),function(x)unique(x[!is.na(x)]))
tot.aman
tot.aman<-apply(sp.list[[2]],c(3),function(x)unique(x[!is.na(x)]))
tot.aman
tot.aman<-apply(sp.list[[2]],c(1,3),function(x)(x[!is.na(x)]))
tot.aman
tot.aman<-apply(sp.list[[2]],c(1,),function(x)(x[!is.na(x)]))
tot.aman<-apply(sp.list[[2]],c(1),function(x)(x[!is.na(x)]))
tot.aman
tot.aman<-apply(sp.list[[2]],c(2),function(x)(x[!is.na(x)]))
tot.aman
tot.aman<-apply(sp.list[[2]],c(3),function(x)(x[!is.na(x)]))
tot.aman
tot.aman<-apply(sp.list[[2]],c(1,3),function(x)(x[!is.na(x)]))
tot.aman<-apply(sp.list[[2]],c(1,3),sum,na.rm=T)
tot.aman
apply(sp.list[[2]],1,function(x){z <- x[!is.na(x)]; ifelse(length(z), sum(z), NA)})
apply(sp.list[[2]],c(1,3),function(x){z <- x[!is.na(x)]; ifelse(length(z), sum(z), NA)})
tot.aman<-apply(sp.list[[2]],c(1,3),function(x){z <- x[!is.na(x)]; ifelse(length(z), sum(z), NA)})
pond.cor<-cor(t(tot.aman))
pond.cor
mean(pond.cor,na.rm=T) #pond correlation is 0.22
mean(cor(tot.aman)) #year correlation is 0.68
mean(cor(tot.aman),na.rm=T) #year correlation is 0.68
mean(cor(tot.aman,na.rm=T)) #year correlation is 0.68
cor(tot.aman)
mean(cor(tot.aman,use="complete.obs")) #year correlation is 0.68
par(mfrow=c(1,2))
tls(matrix(t(tot.aman),nrow=5,ncol=201),fig=T,"spatial")
tls(matrix(t(tot.aman),nrow=5,ncol=201),fig=T,"temporal")
?tls
par(mfrow=c(1,2))
tls(matrix(t(tot.aman),nrow=5,ncol=201),fig=T,"spatial")
tls(matrix(t(tot.aman),nrow=5,ncol=201),fig=T,"temporal")
hist(pond.cor)
load("F:/Rwork/FLW/pond.gis.csv")
library(devtools)
install_github("Gibbsdavidl/CatterPlots")
library(CatterPlots)
x <- -10:10
y <- -x^2 + 10
purr <- catplot(xs=x, ys=y, cat=3, catcolor=c(0,1,1,1))
cats(purr, -x, -y, cat=4, catcolor=c(1,0,1,1))
i did
meow <- multicat(xs=x, ys=y, cat=c(1,2,3), catcolor=list(c(1,1,0,1),c(0,1,1,1)), canvas=c(-0.1,1.1, -0.1, 1.1))
morecats(purr, x, 10*sin(x)+40, size=0.05, cat=c(4,5,6), catcolor=list(c(0,0,1,1),c(0,1,0,1)), type="line")
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10),
catcolor=list(c(0,0,0,1)),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
rm(list=ls())
#which density to use ("dnr" for original estimates, "tom" for your own calculations)
dens.flag<-"tom"
#what is the earliest year you want? (hunting only: 1960; abundance: 1981; DVC: 1987; Traffic: 1988)
year.flag<-1981
#linearly detrend the data?
detr.flag<-"yes"
#set spatial scale flag ("usda" or "county")
scale.flag<-"county"
#clean data: end result are two lists of matrices called "cty.list" and "usda.list"
source("C:/Users/reulab/Desktop/TomA/Rwork/Synch/WI_deer/wi.deer.cleandata.R")
time<-year.flag:2015
wt.list<-list()
for(i in 1:length(cty.list)){
wt.list[[i]]<-wt.array(time, cty.list[[i]], dj = 1/12, dt = 1, max.scale = NULL, sig.test=F)
}
names(wt.list)<-names(cty.list)
par(mfrow=c(1,1))
for(i in 1:length(wt.list)){
#tiff(paste(i,".wmf.tiff",sep=''),res=600,width=3200,height=3200,compression=c("lzw"))
hack.deer<-wt(cbind(time,cty.list[[1]][1,]), dj = 1/12, dt=1, sig.test=0)
wmf<-wav.mean.field(wt.list$AbunEst)
plot.wmf(Mod(wmf),hack.deer,plot.coi = T)
title(paste(names(cty.list)[i]))
#dev.off()
}
hack.deer<-wt(cbind(time,cty.list[[1]][1,]), dj = 1/12, dt=1, sig.test=0,ylab="Timescale",xaxt="s",yaxt="s")
plot.wmf(Mod(wmf),hack.deer,plot.coi = T,ylab="Timescale",xaxt="s",yaxt="s")
for(i in 1:length(wt.list)){
#tiff(paste(i,".wmf.tiff",sep=''),res=600,width=3200,height=3200,compression=c("lzw"))
hack.deer<-wt(cbind(time,cty.list[[1]][1,]), dj = 1/12, dt=1, sig.test=0)
wmf<-wav.mean.field(wt.list$AbunEst)
plot.wmf(Mod(wmf),hack.deer,plot.coi = T,ylab="Timescale",xaxt="s",yaxt="s")
title(paste(names(cty.list)[i]))
#dev.off()
}
cty.list[[1]]
par(mfrow=c(1,1))
for(i in 1:length(wt.list)){
#tiff(paste(i,".wmf.tiff",sep=''),res=600,width=3200,height=3200,compression=c("lzw"))
hack.deer<-wt(cbind(time,cty.list[[1]][1,]), dj = 1/12, dt=1, sig.test=0)
wmf<-wav.mean.field(wt.list[[i]])
plot.wmf(Mod(wmf),hack.deer,plot.coi = T,ylab="Timescale",xaxt="s",yaxt="s")
title(paste(names(cty.list)[i]))
#dev.off()
}
plot.wmf(Mod(wmf),hack.deer,plot.coi = T,ylab="Timescale",xaxt="s",yaxt="s",legend = F)
par(mfrow=c(1,1))
for(i in 1:length(wt.list)){
#tiff(paste(i,".wmf.tiff",sep=''),res=600,width=3200,height=3200,compression=c("lzw"))
hack.deer<-wt(cbind(time,cty.list[[1]][1,]), dj = 1/12, dt=1, sig.test=0)
wmf<-wav.mean.field(wt.list[[i]])
plot.wmf(Mod(wmf),hack.deer,plot.coi = T,ylab="Timescale",xaxt="s",yaxt="s",legend = F)
title(paste(names(cty.list)[i]))
#dev.off()
}
